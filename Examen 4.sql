--EXAMEN ESPARZA

--EXAMEN ROJO

--EJERCICIO 1: VALIDA QUE EN LA TABLA EMPLOYEES QUE UN JEFE NO TENGA A SU CARGO MÁS DE 5 EMPLEADOS 
CREATE TRIGGER TR_EXAMEN1
ON Employees
FOR INSERT, UPDATE
AS
BEGIN
    DECLARE @EmployeeCount INT

    SELECT @EmployeeCount = COUNT(*) 
    FROM Employees
    WHERE ReportsTo = (SELECT ReportsTo FROM INSERTED)

    IF @EmployeeCount > 5
    BEGIN
        ROLLBACK TRAN
        RAISERROR('UN JEFE NO PUEDE TENER MAS DE 5 EMPLEADOS A SU CARGO.', 16, 1)
    END
END
GO

--EJERCICIO 2: VALIDA QUE UNA REGION NO TENGA MÁS DE 20 TERRITORIOS ASIGNADOS.
CREATE TRIGGER TR_Examen2
ON Region FOR INSERT, UPDATE
AS
BEGIN
	DECLARE @TerritoriesCount INT

	SELECT @TerritoriesCount = COUNT(*)
	FROM Region R
	INNER JOIN Territories T ON R.RegionID = T.RegionID

	IF @TerritoriesCount > 20
	BEGIN
		ROLLBACK TRAN
		RAISERROR('NO SE PUEDE TENER MAS DE 20 TERRITORIOS ASIGNADOS')
	END
END
GO

/*EJERCICIO 3: UTILIZANDO TRIGGERS, SIMULAR LA LLAVE PRIMARIA DE LA TABLA CIUDADES(CLAVE, NOMBRE), PERO DEBE TENER LA VARIANTE 
DE QUE ACEPTE SOLO DOS VECES LA MISMA CLAVE.*/
CREATE TRIGGER TR_EXAMEN3
ON CIUDADES FOR INSERT, UPDATE AS
DECLARE @CLAVE INT, @REGISTROS INT
SELECT @CLAVE=CLAVE FROM inserted
SELECT @REGISTROS=COUNT(*) FROM CIUDADES
WHERE @CLAVE=Clave

IF @REGISTROS >2
BEGIN
	ROLLBACK TRAN
	RAISERROR('SOLO SE PUEDEN REALIZAR DOS REGISTROS CON LA MISMA CLAVE',16,1)
END 
GO

/*LA TABLA PRODUCTS TIENEN EL CAMPO MAXIMOPIEZASVENDIDAS, DICHO CAMPO REPRESENTA  EL MAXIMO DE PIEZAS VENDIDAS EN CADA ORDEN, 
REALIZAR UN TRIGGER QUE VALIDE QUE NO SE VENDAN MÁS PIEZAS SEÑALADAS EN ESE CAMPO.*/
-- ReorderLevel

CREATE TRIGGER TR_EXAMEN4
ON Orders INSTEAD OF INSERT, UPDATE
AS
BEGIN
	DECLARE @ORDERID INT
	DECLARE @CANTIDAD INT

	SELECT @ORDERID = OrderID
	FROM Orders
	
	SELECT @CANTIDAD = OD.Quantity
	FROM [Order Details]  OD
	INNER JOIN Orders O ON OD.Discount = O.OrderID
	WHERE O.OrderID = @ORDERID

	IF @CANTIDAD > (SELECT MAXIMOPIEZASVENDIDAS FROM Products)
	BEGIN
		ROLLBACK TRAN
		RAISERROR('NO SE PUEDE VENDER MAS QUE LA CANTIDAD MAXIMA')
	END
END
GO




--EXAMEN NEGRO
--EJERCICIO 1: VALIDAR QUE NO SE PUEDAN ELIMINAR EMPLOYEES Y CUSTOMERS LOS LUNES. 
CREATE TRIGGER TR_EXAMEN_NEGRO1
ON EMPLOYEES FOR DELETE AS 
	IF DATEPART(DW,GETDATE())=2
	BEGIN
		ROLLBACK TRAN
		RAISERROR('NO SE PUEDEN ELIMINAR EMPLEADOS LOS DIAS LUNES',16,1)
	END
GO
CREATE TRIGGER TR_EXAMEN1_2
ON CUSTOMERS FOR DELETE AS 
	IF DATEPART(DW,GETDATE())=2
	BEGIN
		ROLLBACK TRAN
		RAISERROR('NO SE PUEDEN ELIMINAR CLIENTES LOS DIAS LUNES',16,1)
	END
GO

/*EJERCICIO 2: CREAR UN TRIGGER EN EL CUAL DESCUENTE DE LA TABLA PRODUCTS LAS UNIDADES EN STOCK(CAMPO UnitInStock) 
DESPUES DE REALIZAR UNA ORDEN, TAMBIEN DEBE VALIDAR QUE SI SE VENDEN MÁS PRODUCTOS QUE HAY EN STOCK NO PERMITA REALIZAR LA VENTA*/

CREATE TRIGGER TR_EXAMEN_NEGRO2
ON [Order Details] FOR INSERT AS
BEGIN
        IF EXISTS (
            SELECT 1
            FROM inserted i
            INNER JOIN Products p ON i.ProductID = p.ProductID
            WHERE i.Quantity > p.UnitsInStock
        )
        BEGIN
		    ROLLBACK TRAN
            RAISERROR ('No hay suficientes unidades en stock para este producto', 16, 1)
        END

        UPDATE Products
        SET UnitsInStock = UnitsInStock - i.Quantity
        FROM Products p
        INNER JOIN inserted i ON p.ProductID = i.ProductID
END


--EJERCICIO 3: VALIDAR QUE NO PUEDAN VENDER MAS DE 10 PIEZAS POR CADA PRODUCTO EN CADA ORDEN.
CREATE TRIGGER TR_EXAMEN_NEGRO2 
ON [ORDER DETAILS] FOR INSERT, UPDATE AS
BEGIN
	IF EXISTS(
		SELECT 1
		FROM inserted I
		WHERE I.Quantity>10
	)
	BEGIN
		ROLLBACK TRAN
		RAISERROR('NO SE PUEDEN VENDER MÁS DE 10 PIEZAS POR CADA PRODUCTO EN UNA ORDEN',16,1)
	END
END
GO


/*EJERCICO 4: UTILIZANDO TRIGGERS, SIMULA LA RESTRICCION DE LA LLAVE UNICA EN LA TABLA PROVEEDORES(CLAVE, NOMBRE, RFC), 
PERO CON LA CARACTERISTICA QUE SIPERMITA INTRODUCIR MÁS DE UN RFC NULO.*/

CREATE TRIGGER TR_EXAMEN_NEGRO4 
ON PROVEEDORES FOR INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM inserted i INNER JOIN PROVEEDORES p ON i.RFC = p.RFC WHERE i.RFC IS NOT NULL)
    BEGIN
		ROLLBACK TRAN
        RAISERROR ('El RFC ya existe', 16, 1)
    END
    INSERT INTO PROVEEDORES SELECT * FROM inserted
END


--5826
